# source: https://eu1.prisma.sh/plashjindal99-9f715d/feel-free/dev
# timestamp: Tue Aug 28 2018 14:22:56 GMT+0530 (IST)

type AggregateAuthLog {
  count: Int!
}

type AggregateAuthLogInputData {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AuthLog implements Node {
  id: ID!
  data(where: AuthLogInputDataWhereInput): AuthLogInputData!
  isSuccessful: Boolean!
  loggedBy(where: UserWhereInput): User
  createdAt: DateTime!
}

"""A connection to a list of items."""
type AuthLogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthLogEdge]!
  aggregate: AggregateAuthLog!
}

input AuthLogCreateInput {
  isSuccessful: Boolean
  data: AuthLogInputDataCreateOneInput!
  loggedBy: UserCreateOneWithoutAuthLogsInput
}

input AuthLogCreateManyWithoutLoggedByInput {
  create: [AuthLogCreateWithoutLoggedByInput!]
  connect: [AuthLogWhereUniqueInput!]
}

input AuthLogCreateWithoutLoggedByInput {
  isSuccessful: Boolean
  data: AuthLogInputDataCreateOneInput!
}

"""An edge in a connection."""
type AuthLogEdge {
  """The item at the end of the edge."""
  node: AuthLog!

  """A cursor for use in pagination."""
  cursor: String!
}

type AuthLogInputData {
  email: String!
  password: String!
}

"""A connection to a list of items."""
type AuthLogInputDataConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthLogInputDataEdge]!
  aggregate: AggregateAuthLogInputData!
}

input AuthLogInputDataCreateInput {
  email: String!
  password: String!
}

input AuthLogInputDataCreateOneInput {
  create: AuthLogInputDataCreateInput
}

"""An edge in a connection."""
type AuthLogInputDataEdge {
  """The item at the end of the edge."""
  node: AuthLogInputData!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AuthLogInputDataOrderByInput {
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AuthLogInputDataPreviousValues {
  email: String!
  password: String!
}

type AuthLogInputDataSubscriptionPayload {
  mutation: MutationType!
  node: AuthLogInputData
  updatedFields: [String!]
  previousValues: AuthLogInputDataPreviousValues
}

input AuthLogInputDataSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthLogInputDataSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthLogInputDataSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthLogInputDataSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AuthLogInputDataWhereInput
}

input AuthLogInputDataUpdateDataInput {
  email: String
  password: String
}

input AuthLogInputDataUpdateInput {
  email: String
  password: String
}

input AuthLogInputDataUpdateOneInput {
  create: AuthLogInputDataCreateInput
  delete: Boolean
  update: AuthLogInputDataUpdateDataInput
  upsert: AuthLogInputDataUpsertNestedInput
}

input AuthLogInputDataUpsertNestedInput {
  update: AuthLogInputDataUpdateDataInput!
  create: AuthLogInputDataCreateInput!
}

input AuthLogInputDataWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthLogInputDataWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthLogInputDataWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthLogInputDataWhereInput!]
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
}

enum AuthLogOrderByInput {
  id_ASC
  id_DESC
  isSuccessful_ASC
  isSuccessful_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AuthLogPreviousValues {
  id: ID!
  isSuccessful: Boolean!
  createdAt: DateTime!
}

type AuthLogSubscriptionPayload {
  mutation: MutationType!
  node: AuthLog
  updatedFields: [String!]
  previousValues: AuthLogPreviousValues
}

input AuthLogSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthLogSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthLogSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthLogSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AuthLogWhereInput
}

input AuthLogUpdateInput {
  isSuccessful: Boolean
  data: AuthLogInputDataUpdateOneInput
  loggedBy: UserUpdateOneWithoutAuthLogsInput
}

input AuthLogUpdateManyWithoutLoggedByInput {
  create: [AuthLogCreateWithoutLoggedByInput!]
  connect: [AuthLogWhereUniqueInput!]
  disconnect: [AuthLogWhereUniqueInput!]
  delete: [AuthLogWhereUniqueInput!]
  update: [AuthLogUpdateWithWhereUniqueWithoutLoggedByInput!]
  upsert: [AuthLogUpsertWithWhereUniqueWithoutLoggedByInput!]
}

input AuthLogUpdateWithoutLoggedByDataInput {
  isSuccessful: Boolean
  data: AuthLogInputDataUpdateOneInput
}

input AuthLogUpdateWithWhereUniqueWithoutLoggedByInput {
  where: AuthLogWhereUniqueInput!
  data: AuthLogUpdateWithoutLoggedByDataInput!
}

input AuthLogUpsertWithWhereUniqueWithoutLoggedByInput {
  where: AuthLogWhereUniqueInput!
  update: AuthLogUpdateWithoutLoggedByDataInput!
  create: AuthLogCreateWithoutLoggedByInput!
}

input AuthLogWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthLogWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthLogWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthLogWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isSuccessful: Boolean

  """All values that are not equal to given value."""
  isSuccessful_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  data: AuthLogInputDataWhereInput
  loggedBy: UserWhereInput
}

input AuthLogWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createAuthLog(data: AuthLogCreateInput!): AuthLog!
  createPost(data: PostCreateInput!): Post!
  createAuthLogInputData(data: AuthLogInputDataCreateInput!): AuthLogInputData!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateAuthLog(data: AuthLogUpdateInput!, where: AuthLogWhereUniqueInput!): AuthLog
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  deleteUser(where: UserWhereUniqueInput!): User
  deleteAuthLog(where: AuthLogWhereUniqueInput!): AuthLog
  deletePost(where: PostWhereUniqueInput!): Post
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertAuthLog(where: AuthLogWhereUniqueInput!, create: AuthLogCreateInput!, update: AuthLogUpdateInput!): AuthLog!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyAuthLogs(data: AuthLogUpdateInput!, where: AuthLogWhereInput): BatchPayload!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput): BatchPayload!
  updateManyAuthLogInputDatas(data: AuthLogInputDataUpdateInput!, where: AuthLogInputDataWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyAuthLogs(where: AuthLogWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyAuthLogInputDatas(where: AuthLogInputDataWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Post implements Node {
  id: ID!
  data: String!
  postedBy(where: UserWhereInput): User!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  data: String!
  postedBy: UserCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutPostedByInput {
  create: [PostCreateWithoutPostedByInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutPostedByInput {
  data: String!
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  data_ASC
  data_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  id: ID!
  data: String!
  createdAt: DateTime!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  data: String
  postedBy: UserUpdateOneWithoutPostsInput
}

input PostUpdateManyWithoutPostedByInput {
  create: [PostCreateWithoutPostedByInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutPostedByInput!]
}

input PostUpdateWithoutPostedByDataInput {
  data: String
}

input PostUpdateWithWhereUniqueWithoutPostedByInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutPostedByDataInput!
}

input PostUpsertWithWhereUniqueWithoutPostedByInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutPostedByDataInput!
  create: PostCreateWithoutPostedByInput!
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  data: String

  """All values that are not equal to given value."""
  data_not: String

  """All values that are contained in given list."""
  data_in: [String!]

  """All values that are not contained in given list."""
  data_not_in: [String!]

  """All values less than the given value."""
  data_lt: String

  """All values less than or equal the given value."""
  data_lte: String

  """All values greater than the given value."""
  data_gt: String

  """All values greater than or equal the given value."""
  data_gte: String

  """All values containing the given string."""
  data_contains: String

  """All values not containing the given string."""
  data_not_contains: String

  """All values starting with the given string."""
  data_starts_with: String

  """All values not starting with the given string."""
  data_not_starts_with: String

  """All values ending with the given string."""
  data_ends_with: String

  """All values not ending with the given string."""
  data_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  postedBy: UserWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  authLogs(where: AuthLogWhereInput, orderBy: AuthLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuthLog]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  authLogInputDatas(where: AuthLogInputDataWhereInput, orderBy: AuthLogInputDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuthLogInputData]!
  user(where: UserWhereUniqueInput!): User
  authLog(where: AuthLogWhereUniqueInput!): AuthLog
  post(where: PostWhereUniqueInput!): Post
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  authLogsConnection(where: AuthLogWhereInput, orderBy: AuthLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthLogConnection!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  authLogInputDatasConnection(where: AuthLogInputDataWhereInput, orderBy: AuthLogInputDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthLogInputDataConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  authLog(where: AuthLogSubscriptionWhereInput): AuthLogSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  authLogInputData(where: AuthLogInputDataSubscriptionWhereInput): AuthLogInputDataSubscriptionPayload
}

type User implements Node {
  id: ID!
  username: String!
  name: String!
  email: String!
  password: String!
  createdAt: DateTime!
  authLogs(where: AuthLogWhereInput, orderBy: AuthLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuthLog!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  name: String!
  email: String!
  password: String!
  authLogs: AuthLogCreateManyWithoutLoggedByInput
  posts: PostCreateManyWithoutPostedByInput
}

input UserCreateOneWithoutAuthLogsInput {
  create: UserCreateWithoutAuthLogsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAuthLogsInput {
  username: String!
  name: String!
  email: String!
  password: String!
  posts: PostCreateManyWithoutPostedByInput
}

input UserCreateWithoutPostsInput {
  username: String!
  name: String!
  email: String!
  password: String!
  authLogs: AuthLogCreateManyWithoutLoggedByInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  name: String!
  email: String!
  password: String!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  username: String
  name: String
  email: String
  password: String
  authLogs: AuthLogUpdateManyWithoutLoggedByInput
  posts: PostUpdateManyWithoutPostedByInput
}

input UserUpdateOneWithoutAuthLogsInput {
  create: UserCreateWithoutAuthLogsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutAuthLogsDataInput
  upsert: UserUpsertWithoutAuthLogsInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutAuthLogsDataInput {
  username: String
  name: String
  email: String
  password: String
  posts: PostUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutPostsDataInput {
  username: String
  name: String
  email: String
  password: String
  authLogs: AuthLogUpdateManyWithoutLoggedByInput
}

input UserUpsertWithoutAuthLogsInput {
  update: UserUpdateWithoutAuthLogsDataInput!
  create: UserCreateWithoutAuthLogsInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  authLogs_every: AuthLogWhereInput
  authLogs_some: AuthLogWhereInput
  authLogs_none: AuthLogWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
